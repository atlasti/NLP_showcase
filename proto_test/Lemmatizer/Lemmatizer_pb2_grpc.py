# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import Lemmatizer_pb2 as Lemmatizer__pb2


class LemmatizerStub(object):
  """service LanguageDetection {
  	rpc Language(Document) returns(LanguageIdentifier) {}
  	rpc LanguageSupported(Document) returns(Boolean) {}
  	rpc LanguageSupported(LanguageIdentifier) returns(Boolean) {}
  }

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.LemmaSentencesForUnionisedRequest = channel.unary_unary(
        '/Lemmatizer/LemmaSentencesForUnionisedRequest',
        request_serializer=Lemmatizer__pb2.Query.SerializeToString,
        response_deserializer=Lemmatizer__pb2.Locations.FromString,
        )
    self.LemmasForDocument = channel.unary_unary(
        '/Lemmatizer/LemmasForDocument',
        request_serializer=Lemmatizer__pb2.Document.SerializeToString,
        response_deserializer=Lemmatizer__pb2.LemmasAndFrequencies.FromString,
        )
    self.Test = channel.unary_unary(
        '/Lemmatizer/Test',
        request_serializer=Lemmatizer__pb2.TestString.SerializeToString,
        response_deserializer=Lemmatizer__pb2.TestString.FromString,
        )


class LemmatizerServicer(object):
  """service LanguageDetection {
  	rpc Language(Document) returns(LanguageIdentifier) {}
  	rpc LanguageSupported(Document) returns(Boolean) {}
  	rpc LanguageSupported(LanguageIdentifier) returns(Boolean) {}
  }

  """

  def LemmaSentencesForUnionisedRequest(self, request, context):
    """The request will be split into words and lemmatized. Returns location of sentences that conatain ALL lemmatized words from the request.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def LemmasForDocument(self, request, context):
    """Return a sequence of all found lemmas and their frequencies in a given document. 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Test(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LemmatizerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'LemmaSentencesForUnionisedRequest': grpc.unary_unary_rpc_method_handler(
          servicer.LemmaSentencesForUnionisedRequest,
          request_deserializer=Lemmatizer__pb2.Query.FromString,
          response_serializer=Lemmatizer__pb2.Locations.SerializeToString,
      ),
      'LemmasForDocument': grpc.unary_unary_rpc_method_handler(
          servicer.LemmasForDocument,
          request_deserializer=Lemmatizer__pb2.Document.FromString,
          response_serializer=Lemmatizer__pb2.LemmasAndFrequencies.SerializeToString,
      ),
      'Test': grpc.unary_unary_rpc_method_handler(
          servicer.Test,
          request_deserializer=Lemmatizer__pb2.TestString.FromString,
          response_serializer=Lemmatizer__pb2.TestString.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Lemmatizer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
